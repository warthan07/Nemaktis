#include "CubicInterpolatedMapping.h"

template <int dim1, int dim2, typename T>
CubicInterpolatedMapping<dim1,dim2,T>::CubicInterpolatedMapping(
		const std::shared_ptr<std::vector<Vector<dim2,T> > > &values,
		const std::shared_ptr<CartesianMesh<dim1> > &mesh,
		const std::shared_ptr<DefinitionDomain<dim1> > &def_domain) :
	InterpolatedMapping<dim1,dim2,T>::InterpolatedMapping(
			values, mesh, def_domain, 3) {}

template<int dim1, int dim2, typename T>
std::shared_ptr<Mapping<dim1,dim2,T> >
CubicInterpolatedMapping<dim1,dim2,T>::clone() const {
	return std::make_shared<CubicInterpolatedMapping<dim1,dim2,T> >(*this);
}

template <int dim1,int dim2, typename T>
void CubicInterpolatedMapping<dim1,dim2,T>::assemble_pol_weights(
		MultiDimIndex<dim1> &cell_origin_indices) {

	auto &v = this->v;
	auto &pol_coefs = this->pol_coefs;

	MultiDimIndex<dim1> cell_idx(4,-1);
	auto shift = cell_idx();
	for(; cell_idx.valid(); ++cell_idx) {
		v[cell_idx()-shift] = (*this->values)[cell_origin_indices(cell_idx)];
	}

	// The following code was symbolically generated by Mathematica
	// as the involved expressions are horribly complicated.
	// The code could be simplified by using tensor products of the 1D
	// interpolation formula, but it would be less efficient since the
	// sparsity of the interpolation kernel would not be used. 
	if(dim1==1) {
		pol_coefs[0] = v[1];
		pol_coefs[1] = (-v[0] + v[2])/2.;
		pol_coefs[2] = (2.*v[0] - 5.*v[1] + 4.*v[2] - v[3])/2.;
		pol_coefs[3] = (-v[0] + 3.*v[1] - 3.*v[2] + v[3])/2.;
	}
	else if(dim1==2) {
		pol_coefs[0] = v[5];
		pol_coefs[1] = (-v[4] + v[6])/2.;
		pol_coefs[2] = (2.*v[4] - 5.*v[5] + 4.*v[6] - v[7])/2.;
		pol_coefs[3] = (-v[4] + 3.*v[5] - 3.*v[6] + v[7])/2.;
		pol_coefs[4] = (-v[1] + v[9])/2.;
		pol_coefs[5] = (v[0] - v[2] - v[8] + v[10])/4.;
		pol_coefs[6] = (-2.*v[0] + 5.*v[1] - 4.*v[2] + v[3] + 2.*v[8] -
				5.*v[9] + 4.*v[10] - v[11])/4.;
		pol_coefs[7] = (v[0] - 3.*v[1] + 3.*v[2] - v[3] - v[8] + 3.*v[9] -
				3.*v[10] + v[11])/4.;
		pol_coefs[8] = (2.*v[1] - 5.*v[5] + 4.*v[9] - v[13])/2.;
		pol_coefs[9] = (-2.*v[0] + 2.*v[2] + 5.*v[4] - 5.*v[6] - 4.*v[8] +
				4.*v[10] + v[12] - v[14])/4.;
		pol_coefs[10] = (4.*v[0] - 10.*v[1] + 8.*v[2] - 2.*v[3] - 10.*v[4] +
				25.*v[5] - 20.*v[6] + 5.*v[7] + 8.*v[8] - 20.*v[9] + 16.*v[10]
				- 4.*v[11] - 2.*v[12] + 5.*v[13] - 4.*v[14] + v[15])/4.;
		pol_coefs[11] = (-2.*v[0] + 6.*v[1] - 6.*v[2] + 2.*v[3] + 5.*v[4] -
				15.*v[5] + 15.*v[6] - 5.*v[7] - 4.*v[8] + 12.*v[9] - 12.*v[10]
				+ 4.*v[11] + v[12] - 3.*v[13] + 3.*v[14] - v[15])/4.;
		pol_coefs[12] = (-v[1] + 3.*v[5] - 3.*v[9] + v[13])/2.;
		pol_coefs[13] = (v[0] - v[2] - 3.*v[4] + 3.*v[6] + 3.*v[8] -
				3.*v[10] - v[12] + v[14])/4.;
		pol_coefs[14] = (-2.*v[0] + 5.*v[1] - 4.*v[2] + v[3] + 6.*v[4] -
				15.*v[5] + 12.*v[6] - 3.*v[7] - 6.*v[8] + 15.*v[9] - 12.*v[10]
				+ 3.*v[11] + 2.*v[12] - 5.*v[13] + 4.*v[14] - v[15])/4.;
		pol_coefs[15] = (v[0] - 3.*v[1] + 3.*v[2] - v[3] - 3.*v[4] + 9.*v[5]
				- 9.*v[6] + 3.*v[7] + 3.*v[8] - 9.*v[9] + 9.*v[10] - 3.*v[11]
				- v[12] + 3.*v[13] - 3.*v[14] + v[15])/4.;
	}
	else if(dim1==3) {
		pol_coefs[0] = v[21];
		pol_coefs[1] = (-v[20] + v[22])/2.;
		pol_coefs[2] = (2.*v[20] - 5.*v[21] + 4.*v[22] - v[23])/2.;
		pol_coefs[3] = (-v[20] + 3.*v[21] - 3.*v[22] + v[23])/2.;
		pol_coefs[4] = (-v[17] + v[25])/2.;
		pol_coefs[5] = (v[16] - v[18] - v[24] + v[26])/4.;
		pol_coefs[6] = (-2.*v[16] + 5.*v[17] - 4.*v[18] + v[19] + 2.*v[24] -
				5.*v[25] + 4.*v[26] - v[27])/4.;
		pol_coefs[7] = (v[16] - 3.*v[17] + 3.*v[18] - v[19] - v[24] +
				3.*v[25] - 3.*v[26] + v[27])/4.;
		pol_coefs[8] = (2.*v[17] - 5.*v[21] + 4.*v[25] - v[29])/2.;
		pol_coefs[9] = (-2.*v[16] + 2.*v[18] + 5.*v[20] - 5.*v[22] - 4.*v[24]
				+ 4.*v[26] + v[28] - v[30])/4.;
		pol_coefs[10] = (4.*v[16] - 10.*v[17] + 8.*v[18] - 2.*v[19] -
				10.*v[20] + 25.*v[21] - 20.*v[22] + 5.*v[23] + 8.*v[24] -
				20.*v[25] + 16.*v[26] - 4.*v[27] - 2.*v[28] + 5.*v[29] -
				4.*v[30] + v[31])/4.;
		pol_coefs[11] = (-2.*v[16] + 6.*v[17] - 6.*v[18] + 2.*v[19] +
				5.*v[20] - 15.*v[21] + 15.*v[22] - 5.*v[23] - 4.*v[24] +
				12.*v[25] - 12.*v[26] + 4.*v[27] + v[28] - 3.*v[29] +
				3.*v[30] - v[31])/4.;
		pol_coefs[12] = (-v[17] + 3.*v[21] - 3.*v[25] + v[29])/2.;
		pol_coefs[13] = (v[16] - v[18] - 3.*v[20] + 3.*v[22] + 3.*v[24] -
				3.*v[26] - v[28] + v[30])/4.;
		pol_coefs[14] = (-2.*v[16] + 5.*v[17] - 4.*v[18] + v[19] + 6.*v[20]
				- 15.*v[21] + 12.*v[22] - 3.*v[23] - 6.*v[24] + 15.*v[25] -
				12.*v[26] + 3.*v[27] + 2.*v[28] - 5.*v[29] + 4.*v[30] -
				v[31])/4.;
		pol_coefs[15] = (v[16] - 3.*v[17] + 3.*v[18] - v[19] - 3.*v[20] +
				9.*v[21] - 9.*v[22] + 3.*v[23] + 3.*v[24] - 9.*v[25] +
				9.*v[26] - 3.*v[27] - v[28] + 3.*v[29] - 3.*v[30] +
				v[31])/4.;
		pol_coefs[16] = (-v[5] + v[37])/2.;
		pol_coefs[17] = (v[4] - v[6] - v[36] + v[38])/4.;
		pol_coefs[18] = (-2.*v[4] + 5.*v[5] - 4.*v[6] + v[7] + 2.*v[36] -
				5.*v[37] + 4.*v[38] - v[39])/4.;
		pol_coefs[19] = (v[4] - 3.*v[5] + 3.*v[6] - v[7] - v[36] + 3.*v[37]
				- 3.*v[38] + v[39])/4.;
		pol_coefs[20] = (v[1] - v[9] - v[33] + v[41])/4.;
		pol_coefs[21] = (-v[0] + v[2] + v[8] - v[10] + v[32] - v[34] -
				v[40] + v[42])/8.;
		pol_coefs[22] = (2.*v[0] - 5.*v[1] + 4.*v[2] - v[3] - 2.*v[8] +
				5.*v[9] - 4.*v[10] + v[11] - 2.*v[32] + 5.*v[33] - 4.*v[34] +
				v[35] + 2.*v[40] - 5.*v[41] + 4.*v[42] - v[43])/8.;
		pol_coefs[23] = (-v[0] + 3.*v[1] - 3.*v[2] + v[3] + v[8] - 3.*v[9]
				+ 3.*v[10] - v[11] + v[32] - 3.*v[33] + 3.*v[34] - v[35] -
				v[40] + 3.*v[41] - 3.*v[42] + v[43])/8.;
		pol_coefs[24] = (-2.*v[1] + 5.*v[5] - 4.*v[9] + v[13] + 2.*v[33] -
				5.*v[37] + 4.*v[41] - v[45])/4.;
		pol_coefs[25] = (2.*v[0] - 2.*v[2] - 5.*v[4] + 5.*v[6] + 4.*v[8] -
				4.*v[10] - v[12] + v[14] - 2.*v[32] + 2.*v[34] + 5.*v[36] -
				5.*v[38] - 4.*v[40] + 4.*v[42] + v[44] - v[46])/8.;
		pol_coefs[26] = (-4.*v[0] + 10.*v[1] - 8.*v[2] + 2.*v[3] + 10.*v[4] -
				25.*v[5] + 20.*v[6] - 5.*v[7] - 8.*v[8] + 20.*v[9] - 16.*v[10]
				+ 4.*v[11] + 2.*v[12] - 5.*v[13] + 4.*v[14] - v[15] +
				4.*v[32] - 10.*v[33] + 8.*v[34] - 2.*v[35] - 10.*v[36] +
				25.*v[37] - 20.*v[38] + 5.*v[39] + 8.*v[40] - 20.*v[41] +
				16.*v[42] - 4.*v[43] - 2.*v[44] + 5.*v[45] - 4.*v[46] +
				v[47])/8.;
		pol_coefs[27] = (2.*v[0] - 6.*v[1] + 6.*v[2] - 2.*v[3] - 5.*v[4] +
				15.*v[5] - 15.*v[6] + 5.*v[7] + 4.*v[8] - 12.*v[9] + 12.*v[10]
				- 4.*v[11] - v[12] + 3.*v[13] - 3.*v[14] + v[15] - 2.*v[32]
				+ 6.*v[33] - 6.*v[34] + 2.*v[35] + 5.*v[36] - 15.*v[37] +
				15.*v[38] - 5.*v[39] - 4.*v[40] + 12.*v[41] - 12.*v[42] +
				4.*v[43] + v[44] - 3.*v[45] + 3.*v[46] - v[47])/8.;
		pol_coefs[28] = (v[1] - 3.*v[5] + 3.*v[9] - v[13] - v[33] +
				3.*v[37] - 3.*v[41] + v[45])/4.;
		pol_coefs[29] = (-v[0] + v[2] + 3.*v[4] - 3.*v[6] - 3.*v[8] +
				3.*v[10] + v[12] - v[14] + v[32] - v[34] - 3.*v[36] +
				3.*v[38] + 3.*v[40] - 3.*v[42] - v[44] + v[46])/8.;
		pol_coefs[30] = (2.*v[0] - 5.*v[1] + 4.*v[2] - v[3] - 6.*v[4] +
				15.*v[5] - 12.*v[6] + 3.*v[7] + 6.*v[8] - 15.*v[9] + 12.*v[10]
				- 3.*v[11] - 2.*v[12] + 5.*v[13] - 4.*v[14] + v[15] -
				2.*v[32] + 5.*v[33] - 4.*v[34] + v[35] + 6.*v[36] - 15.*v[37]
				+ 12.*v[38] - 3.*v[39] - 6.*v[40] + 15.*v[41] - 12.*v[42] +
				3.*v[43] + 2.*v[44] - 5.*v[45] + 4.*v[46] - v[47])/8.;
		pol_coefs[31] = (-v[0] + 3.*v[1] - 3.*v[2] + v[3] + 3.*v[4] -
				9.*v[5] + 9.*v[6] - 3.*v[7] - 3.*v[8] + 9.*v[9] - 9.*v[10] +
				3.*v[11] + v[12] - 3.*v[13] + 3.*v[14] - v[15] + v[32] -
				3.*v[33] + 3.*v[34] - v[35] - 3.*v[36] + 9.*v[37] - 9.*v[38]
				+ 3.*v[39] + 3.*v[40] - 9.*v[41] + 9.*v[42] - 3.*v[43] -
				v[44] + 3.*v[45] - 3.*v[46] + v[47])/8.;
		pol_coefs[32] = (2.*v[5] - 5.*v[21] + 4.*v[37] - v[53])/2.;
		pol_coefs[33] = (-2.*v[4] + 2.*v[6] + 5.*v[20] - 5.*v[22] - 4.*v[36] + 
				4.*v[38] + v[52] - v[54])/4.;
		pol_coefs[34] = (4.*v[4] - 10.*v[5] + 8.*v[6] - 2.*v[7] - 10.*v[20] +
				25.*v[21] - 20.*v[22] + 5.*v[23] + 8.*v[36] - 20.*v[37] +
				16.*v[38] - 4.*v[39] - 2.*v[52] + 5.*v[53] - 4.*v[54] +
				v[55])/4.;
		pol_coefs[35] = (-2.*v[4] + 6.*v[5] - 6.*v[6] + 2.*v[7] + 5.*v[20] -
				15.*v[21] + 15.*v[22] - 5.*v[23] - 4.*v[36] + 12.*v[37] -
				12.*v[38] + 4.*v[39] + v[52] - 3.*v[53] + 3.*v[54] -
				v[55])/4.;
		pol_coefs[36] = (-2.*v[1] + 2.*v[9] + 5.*v[17] - 5.*v[25] - 4.*v[33]
				+ 4.*v[41] + v[49] - v[57])/4.;
		pol_coefs[37] = (2.*v[0] - 2.*v[2] - 2.*v[8] + 2.*v[10] - 5.*v[16] +
				5.*v[18] + 5.*v[24] - 5.*v[26] + 4.*v[32] - 4.*v[34] -
				4.*v[40] + 4.*v[42] - v[48] + v[50] + v[56] - v[58])/8.;
		pol_coefs[38] = (-4.*v[0] + 10.*v[1] - 8.*v[2] + 2.*v[3] + 4.*v[8] -
				10.*v[9] + 8.*v[10] - 2.*v[11] + 10.*v[16] - 25.*v[17] +
				20.*v[18] - 5.*v[19] - 10.*v[24] + 25.*v[25] - 20.*v[26] +
				5.*v[27] - 8.*v[32] + 20.*v[33] - 16.*v[34] + 4.*v[35] +
				8.*v[40] - 20.*v[41] + 16.*v[42] - 4.*v[43] + 2.*v[48] -
				5.*v[49] + 4.*v[50] - v[51] - 2.*v[56] + 5.*v[57] - 4.*v[58]
				+ v[59])/8.;
		pol_coefs[39] = (2.*v[0] - 6.*v[1] + 6.*v[2] - 2.*v[3] - 2.*v[8] +
				6.*v[9] - 6.*v[10] + 2.*v[11] - 5.*v[16] + 15.*v[17] -
				15.*v[18] + 5.*v[19] + 5.*v[24] - 15.*v[25] + 15.*v[26] -
				5.*v[27] + 4.*v[32] - 12.*v[33] + 12.*v[34] - 4.*v[35] -
				4.*v[40] + 12.*v[41] - 12.*v[42] + 4.*v[43] - v[48] +
				3.*v[49] - 3.*v[50] + v[51] + v[56] - 3.*v[57] + 3.*v[58] -
				v[59])/8.;
		pol_coefs[40] = (4.*v[1] - 10.*v[5] + 8.*v[9] - 2.*v[13] - 10.*v[17]
				+ 25.*v[21] - 20.*v[25] + 5.*v[29] + 8.*v[33] - 20.*v[37] +
				16.*v[41] - 4.*v[45] - 2.*v[49] + 5.*v[53] - 4.*v[57] +
				v[61])/4.;
		pol_coefs[41] = (-4.*v[0] + 4.*v[2] + 10.*v[4] - 10.*v[6] - 8.*v[8] +
				8.*v[10] + 2.*v[12] - 2.*v[14] + 10.*v[16] - 10.*v[18] -
				25.*v[20] + 25.*v[22] + 20.*v[24] - 20.*v[26] - 5.*v[28] +
				5.*v[30] - 8.*v[32] + 8.*v[34] + 20.*v[36] - 20.*v[38] -
				16.*v[40] + 16.*v[42] + 4.*v[44] - 4.*v[46] + 2.*v[48] -
				2.*v[50] - 5.*v[52] + 5.*v[54] + 4.*v[56] - 4.*v[58] - v[60]
				+ v[62])/8.;
		pol_coefs[42] = (8.*v[0] - 20.*v[1] + 16.*v[2] - 4.*v[3] - 20.*v[4] +
				50.*v[5] - 40.*v[6] + 10.*v[7] + 16.*v[8] - 40.*v[9] +
				32.*v[10] - 8.*v[11] - 4.*v[12] + 10.*v[13] - 8.*v[14] +
				2.*v[15] - 20.*v[16] + 50.*v[17] - 40.*v[18] + 10.*v[19] +
				50.*v[20] - 125.*v[21] + 100.*v[22] - 25.*v[23] - 40.*v[24] +
				100.*v[25] - 80.*v[26] + 20.*v[27] + 10.*v[28] - 25.*v[29] +
				20.*v[30] - 5.*v[31] + 16.*v[32] - 40.*v[33] + 32.*v[34] -
				8.*v[35] - 40.*v[36] + 100.*v[37] - 80.*v[38] + 20.*v[39] +
				32.*v[40] - 80.*v[41] + 64.*v[42] - 16.*v[43] - 8.*v[44] +
				20.*v[45] - 16.*v[46] + 4.*v[47] - 4.*v[48] + 10.*v[49] -
				8.*v[50] + 2.*v[51] + 10.*v[52] - 25.*v[53] + 20.*v[54] -
				5.*v[55] - 8.*v[56] + 20.*v[57] - 16.*v[58] + 4.*v[59] +
				2.*v[60] - 5.*v[61] + 4.*v[62] - v[63])/8.;
		pol_coefs[43] = (-4.*v[0] + 12.*v[1] - 12.*v[2] + 4.*v[3] + 10.*v[4]
				- 30.*v[5] + 30.*v[6] - 10.*v[7] - 8.*v[8] + 24.*v[9] -
				24.*v[10] + 8.*v[11] + 2.*v[12] - 6.*v[13] + 6.*v[14] -
				2.*v[15] + 10.*v[16] - 30.*v[17] + 30.*v[18] - 10.*v[19] -
				25.*v[20] + 75.*v[21] - 75.*v[22] + 25.*v[23] + 20.*v[24] -
				60.*v[25] + 60.*v[26] - 20.*v[27] - 5.*v[28] + 15.*v[29] -
				15.*v[30] + 5.*v[31] - 8.*v[32] + 24.*v[33] - 24.*v[34] +
				8.*v[35] + 20.*v[36] - 60.*v[37] + 60.*v[38] - 20.*v[39] -
				16.*v[40] + 48.*v[41] - 48.*v[42] + 16.*v[43] + 4.*v[44] -
				12.*v[45] + 12.*v[46] - 4.*v[47] + 2.*v[48] - 6.*v[49] +
				6.*v[50] - 2.*v[51] - 5.*v[52] + 15.*v[53] - 15.*v[54] +
				5.*v[55] + 4.*v[56] - 12.*v[57] + 12.*v[58] - 4.*v[59] -
				v[60] + 3.*v[61] - 3.*v[62] + v[63])/8.;
		pol_coefs[44] = (-2.*v[1] + 6.*v[5] - 6.*v[9] + 2.*v[13] + 5.*v[17] -
				15.*v[21] + 15.*v[25] - 5.*v[29] - 4.*v[33] + 12.*v[37] -
				12.*v[41] + 4.*v[45] + v[49] - 3.*v[53] + 3.*v[57] -
				v[61])/4.;
		pol_coefs[45] = (2.*v[0] - 2.*v[2] - 6.*v[4] + 6.*v[6] + 6.*v[8] -
				6.*v[10] - 2.*v[12] + 2.*v[14] - 5.*v[16] + 5.*v[18] +
				15.*v[20] - 15.*v[22] - 15.*v[24] + 15.*v[26] + 5.*v[28] -
				5.*v[30] + 4.*v[32] - 4.*v[34] - 12.*v[36] + 12.*v[38] +
				12.*v[40] - 12.*v[42] - 4.*v[44] + 4.*v[46] - v[48] + v[50]
				+ 3.*v[52] - 3.*v[54] - 3.*v[56] + 3.*v[58] + v[60] -
				v[62])/8.;
		pol_coefs[46] = (-4.*v[0] + 10.*v[1] - 8.*v[2] + 2.*v[3] + 12.*v[4] -
				30.*v[5] + 24.*v[6] - 6.*v[7] - 12.*v[8] + 30.*v[9] -
				24.*v[10] + 6.*v[11] + 4.*v[12] - 10.*v[13] + 8.*v[14] -
				2.*v[15] + 10.*v[16] - 25.*v[17] + 20.*v[18] - 5.*v[19] -
				30.*v[20] + 75.*v[21] - 60.*v[22] + 15.*v[23] + 30.*v[24] -
				75.*v[25] + 60.*v[26] - 15.*v[27] - 10.*v[28] + 25.*v[29] -
				20.*v[30] + 5.*v[31] - 8.*v[32] + 20.*v[33] - 16.*v[34] +
				4.*v[35] + 24.*v[36] - 60.*v[37] + 48.*v[38] - 12.*v[39] -
				24.*v[40] + 60.*v[41] - 48.*v[42] + 12.*v[43] + 8.*v[44] -
				20.*v[45] + 16.*v[46] - 4.*v[47] + 2.*v[48] - 5.*v[49] +
				4.*v[50] - v[51] - 6.*v[52] + 15.*v[53] - 12.*v[54] +
				3.*v[55] + 6.*v[56] - 15.*v[57] + 12.*v[58] - 3.*v[59] -
				2.*v[60] + 5.*v[61] - 4.*v[62] + v[63])/8.;
		pol_coefs[47] = (2.*v[0] - 6.*v[1] + 6.*v[2] - 2.*v[3] - 6.*v[4] +
				18.*v[5] - 18.*v[6] + 6.*v[7] + 6.*v[8] - 18.*v[9] + 18.*v[10]
				- 6.*v[11] - 2.*v[12] + 6.*v[13] - 6.*v[14] + 2.*v[15] -
				5.*v[16] + 15.*v[17] - 15.*v[18] + 5.*v[19] + 15.*v[20] -
				45.*v[21] + 45.*v[22] - 15.*v[23] - 15.*v[24] + 45.*v[25] -
				45.*v[26] + 15.*v[27] + 5.*v[28] - 15.*v[29] + 15.*v[30] -
				5.*v[31] + 4.*v[32] - 12.*v[33] + 12.*v[34] - 4.*v[35] -
				12.*v[36] + 36.*v[37] - 36.*v[38] + 12.*v[39] + 12.*v[40] -
				36.*v[41] + 36.*v[42] - 12.*v[43] - 4.*v[44] + 12.*v[45] -
				12.*v[46] + 4.*v[47] - v[48] + 3.*v[49] - 3.*v[50] + v[51] +
				3.*v[52] - 9.*v[53] + 9.*v[54] - 3.*v[55] - 3.*v[56] +
				9.*v[57] - 9.*v[58] + 3.*v[59] + v[60] - 3.*v[61] + 3.*v[62]
				- v[63])/8.;
		pol_coefs[48] = (-v[5] + 3.*v[21] - 3.*v[37] + v[53])/2.;
		pol_coefs[49] = (v[4] - v[6] - 3.*v[20] + 3.*v[22] + 3.*v[36] -
				3.*v[38] - v[52] + v[54])/4.;
		pol_coefs[50] = (-2.*v[4] + 5.*v[5] - 4.*v[6] + v[7] + 6.*v[20] -
				15.*v[21] + 12.*v[22] - 3.*v[23] - 6.*v[36] + 15.*v[37] -
				12.*v[38] + 3.*v[39] + 2.*v[52] - 5.*v[53] + 4.*v[54] -
				v[55])/4.;
		pol_coefs[51] = (v[4] - 3.*v[5] + 3.*v[6] - v[7] - 3.*v[20] +
				9.*v[21] - 9.*v[22] + 3.*v[23] + 3.*v[36] - 9.*v[37] +
				9.*v[38] - 3.*v[39] - v[52] + 3.*v[53] - 3.*v[54] +
				v[55])/4.;
		pol_coefs[52] = (v[1] - v[9] - 3.*v[17] + 3.*v[25] + 3.*v[33] -
				3.*v[41] - v[49] + v[57])/4.;
		pol_coefs[53] = (-v[0] + v[2] + v[8] - v[10] + 3.*v[16] - 3.*v[18]
				- 3.*v[24] + 3.*v[26] - 3.*v[32] + 3.*v[34] + 3.*v[40] -
				3.*v[42] + v[48] - v[50] - v[56] + v[58])/8.;
		pol_coefs[54] = (2.*v[0] - 5.*v[1] + 4.*v[2] - v[3] - 2.*v[8] +
				5.*v[9] - 4.*v[10] + v[11] - 6.*v[16] + 15.*v[17] - 12.*v[18]
				+ 3.*v[19] + 6.*v[24] - 15.*v[25] + 12.*v[26] - 3.*v[27] +
				6.*v[32] - 15.*v[33] + 12.*v[34] - 3.*v[35] - 6.*v[40] +
				15.*v[41] - 12.*v[42] + 3.*v[43] - 2.*v[48] + 5.*v[49] -
				4.*v[50] + v[51] + 2.*v[56] - 5.*v[57] + 4.*v[58] -
				v[59])/8.;
		pol_coefs[55] = (-v[0] + 3.*v[1] - 3.*v[2] + v[3] + v[8] - 3.*v[9]
				+ 3.*v[10] - v[11] + 3.*v[16] - 9.*v[17] + 9.*v[18] -
				3.*v[19] - 3.*v[24] + 9.*v[25] - 9.*v[26] + 3.*v[27] -
				3.*v[32] + 9.*v[33] - 9.*v[34] + 3.*v[35] + 3.*v[40] -
				9.*v[41] + 9.*v[42] - 3.*v[43] + v[48] - 3.*v[49] + 3.*v[50]
				- v[51] - v[56] + 3.*v[57] - 3.*v[58] + v[59])/8.;
		pol_coefs[56] = (-2.*v[1] + 5.*v[5] - 4.*v[9] + v[13] + 6.*v[17] -
				15.*v[21] + 12.*v[25] - 3.*v[29] - 6.*v[33] + 15.*v[37] -
				12.*v[41] + 3.*v[45] + 2.*v[49] - 5.*v[53] + 4.*v[57] -
				v[61])/4.;
		pol_coefs[57] = (2.*v[0] - 2.*v[2] - 5.*v[4] + 5.*v[6] + 4.*v[8] -
				4.*v[10] - v[12] + v[14] - 6.*v[16] + 6.*v[18] + 15.*v[20] -
				15.*v[22] - 12.*v[24] + 12.*v[26] + 3.*v[28] - 3.*v[30] +
				6.*v[32] - 6.*v[34] - 15.*v[36] + 15.*v[38] + 12.*v[40] -
				12.*v[42] - 3.*v[44] + 3.*v[46] - 2.*v[48] + 2.*v[50] +
				5.*v[52] - 5.*v[54] - 4.*v[56] + 4.*v[58] + v[60] -
				v[62])/8.;
		pol_coefs[58] = (-4.*v[0] + 10.*v[1] - 8.*v[2] + 2.*v[3] + 10.*v[4] -
				25.*v[5] + 20.*v[6] - 5.*v[7] - 8.*v[8] + 20.*v[9] - 16.*v[10]
				+ 4.*v[11] + 2.*v[12] - 5.*v[13] + 4.*v[14] - v[15] +
				12.*v[16] - 30.*v[17] + 24.*v[18] - 6.*v[19] - 30.*v[20] +
				75.*v[21] - 60.*v[22] + 15.*v[23] + 24.*v[24] - 60.*v[25] +
				48.*v[26] - 12.*v[27] - 6.*v[28] + 15.*v[29] - 12.*v[30] +
				3.*v[31] - 12.*v[32] + 30.*v[33] - 24.*v[34] + 6.*v[35] +
				30.*v[36] - 75.*v[37] + 60.*v[38] - 15.*v[39] - 24.*v[40] +
				60.*v[41] - 48.*v[42] + 12.*v[43] + 6.*v[44] - 15.*v[45] +
				12.*v[46] - 3.*v[47] + 4.*v[48] - 10.*v[49] + 8.*v[50] -
				2.*v[51] - 10.*v[52] + 25.*v[53] - 20.*v[54] + 5.*v[55] +
				8.*v[56] - 20.*v[57] + 16.*v[58] - 4.*v[59] - 2.*v[60] +
				5.*v[61] - 4.*v[62] + v[63])/8.;
		pol_coefs[59] = (2.*v[0] - 6.*v[1] + 6.*v[2] - 2.*v[3] - 5.*v[4] +
				15.*v[5] - 15.*v[6] + 5.*v[7] + 4.*v[8] - 12.*v[9] + 12.*v[10]
				- 4.*v[11] - v[12] + 3.*v[13] - 3.*v[14] + v[15] - 6.*v[16]
				+ 18.*v[17] - 18.*v[18] + 6.*v[19] + 15.*v[20] - 45.*v[21] +
				45.*v[22] - 15.*v[23] - 12.*v[24] + 36.*v[25] - 36.*v[26] +
				12.*v[27] + 3.*v[28] - 9.*v[29] + 9.*v[30] - 3.*v[31] +
				6.*v[32] - 18.*v[33] + 18.*v[34] - 6.*v[35] - 15.*v[36] +
				45.*v[37] - 45.*v[38] + 15.*v[39] + 12.*v[40] - 36.*v[41] +
				36.*v[42] - 12.*v[43] - 3.*v[44] + 9.*v[45] - 9.*v[46] +
				3.*v[47] - 2.*v[48] + 6.*v[49] - 6.*v[50] + 2.*v[51] +
				5.*v[52] - 15.*v[53] + 15.*v[54] - 5.*v[55] - 4.*v[56] +
				12.*v[57] - 12.*v[58] + 4.*v[59] + v[60] - 3.*v[61] +
				3.*v[62] - v[63])/8.;
		pol_coefs[60] = (v[1] - 3.*v[5] + 3.*v[9] - v[13] - 3.*v[17] +
				9.*v[21] - 9.*v[25] + 3.*v[29] + 3.*v[33] - 9.*v[37] +
				9.*v[41] - 3.*v[45] - v[49] + 3.*v[53] - 3.*v[57] +
				v[61])/4.;
		pol_coefs[61] = (-v[0] + v[2] + 3.*v[4] - 3.*v[6] - 3.*v[8] +
				3.*v[10] + v[12] - v[14] + 3.*v[16] - 3.*v[18] - 9.*v[20] +
				9.*v[22] + 9.*v[24] - 9.*v[26] - 3.*v[28] + 3.*v[30] -
				3.*v[32] + 3.*v[34] + 9.*v[36] - 9.*v[38] - 9.*v[40] +
				9.*v[42] + 3.*v[44] - 3.*v[46] + v[48] - v[50] - 3.*v[52] +
				3.*v[54] + 3.*v[56] - 3.*v[58] - v[60] + v[62])/8.;
		pol_coefs[62] = (2.*v[0] - 5.*v[1] + 4.*v[2] - v[3] - 6.*v[4] +
				15.*v[5] - 12.*v[6] + 3.*v[7] + 6.*v[8] - 15.*v[9] + 12.*v[10]
				- 3.*v[11] - 2.*v[12] + 5.*v[13] - 4.*v[14] + v[15] -
				6.*v[16] + 15.*v[17] - 12.*v[18] + 3.*v[19] + 18.*v[20] -
				45.*v[21] + 36.*v[22] - 9.*v[23] - 18.*v[24] + 45.*v[25] -
				36.*v[26] + 9.*v[27] + 6.*v[28] - 15.*v[29] + 12.*v[30] -
				3.*v[31] + 6.*v[32] - 15.*v[33] + 12.*v[34] - 3.*v[35] -
				18.*v[36] + 45.*v[37] - 36.*v[38] + 9.*v[39] + 18.*v[40] -
				45.*v[41] + 36.*v[42] - 9.*v[43] - 6.*v[44] + 15.*v[45] -
				12.*v[46] + 3.*v[47] - 2.*v[48] + 5.*v[49] - 4.*v[50] + v[51]
				+ 6.*v[52] - 15.*v[53] + 12.*v[54] - 3.*v[55] - 6.*v[56] +
				15.*v[57] - 12.*v[58] + 3.*v[59] + 2.*v[60] - 5.*v[61] +
				4.*v[62] - v[63])/8.;
		pol_coefs[63] = (-v[0] + 3.*v[1] - 3.*v[2] + v[3] + 3.*v[4] -
				9.*v[5] + 9.*v[6] - 3.*v[7] - 3.*v[8] + 9.*v[9] - 9.*v[10] +
				3.*v[11] + v[12] - 3.*v[13] + 3.*v[14] - v[15] + 3.*v[16] -
				9.*v[17] + 9.*v[18] - 3.*v[19] - 9.*v[20] + 27.*v[21] -
				27.*v[22] + 9.*v[23] + 9.*v[24] - 27.*v[25] + 27.*v[26] -
				9.*v[27] - 3.*v[28] + 9.*v[29] - 9.*v[30] + 3.*v[31] -
				3.*v[32] + 9.*v[33] - 9.*v[34] + 3.*v[35] + 9.*v[36] -
				27.*v[37] + 27.*v[38] - 9.*v[39] - 9.*v[40] + 27.*v[41] -
				27.*v[42] + 9.*v[43] + 3.*v[44] - 9.*v[45] + 9.*v[46] -
				3.*v[47] + v[48] - 3.*v[49] + 3.*v[50] - v[51] - 3.*v[52] +
				9.*v[53] - 9.*v[54] + 3.*v[55] + 3.*v[56] - 9.*v[57] +
				9.*v[58] - 3.*v[59] - v[60] + 3.*v[61] - 3.*v[62] +
				v[63])/8.;
	}
}
	
template class CubicInterpolatedMapping<1,1,double>;
template class CubicInterpolatedMapping<1,2,double>;
template class CubicInterpolatedMapping<1,3,double>;
template class CubicInterpolatedMapping<2,1,double>;
template class CubicInterpolatedMapping<2,2,double>;
template class CubicInterpolatedMapping<2,3,double>;
template class CubicInterpolatedMapping<3,1,double>;
template class CubicInterpolatedMapping<3,2,double>;
template class CubicInterpolatedMapping<3,3,double>;
	
template class CubicInterpolatedMapping<1,1,std::complex<double> >;
template class CubicInterpolatedMapping<1,2,std::complex<double> >;
template class CubicInterpolatedMapping<1,3,std::complex<double> >;
template class CubicInterpolatedMapping<2,1,std::complex<double> >;
template class CubicInterpolatedMapping<2,2,std::complex<double> >;
template class CubicInterpolatedMapping<2,3,std::complex<double> >;
template class CubicInterpolatedMapping<3,1,std::complex<double> >;
template class CubicInterpolatedMapping<3,2,std::complex<double> >;
template class CubicInterpolatedMapping<3,3,std::complex<double> >;
